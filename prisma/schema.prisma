datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  JOBSEEKER
  ADMIN
  SUPERADMIN
  EMPLOYER
}


model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          UserRole // Directly use the enum here
  subscriptionPlan        String    @default("Free Trial")  // Corresponds to subscription_plan
  jobPostQuota            Int       @default(3)        // Corresponds to job_post_quota
  subscriptionStartDate   DateTime?                    // Corresponds to subscription_start_date
  subscriptionEndDate     DateTime?                    // Corresponds to subscription_end_date
  profile       Json?
  applications  Application[]
  payments      Payment[]
  accounts      Account[]
  lastLogin                  DateTime  @default(now())
  isVerified                 Boolean   @default(false)
  resetPasswordToken         String?
  resetPasswordExpiresAt     DateTime?
  verificationToken          String?
  verificationTokenExpiresAt DateTime?


  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Blog      Blog[]
  Like      Like[]
  Comment   Comment[]
  SavedBlog SavedBlog[]

  @@map("users")
}

model Application {
  id           String              @id @default(cuid())
  user_id      String
  user         User                @relation(fields: [user_id], references: [id])
  job_id       String
  cover_letter String?
  resume_url   String?
  status       String
  statuses     ApplicationStatus[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("applications")
}

model ApplicationStatus {
  id             String      @id @default(cuid())
  application_id String
  application    Application @relation(fields: [application_id], references: [id])
  status         String
  updated_at     DateTime

  @@map("application_statuses")
}

enum PaymentStatus {
  processing
  succeeded
  canceled
  failed
  requires_payment_method
  requires_action
  requires_capture
  requires_confirmation
}



model Payment {
  id             String @id @default(cuid())
  user_id        String
  user           User   @relation(fields: [user_id], references: [id])
  amount         Float
  payment_method String
  payment_status PaymentStatus @default(requires_payment_method) 
  transactionId  String?

  createdAt      DateTime @default(now())


  @@map("payments")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  image     String?
  post      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User        @relation(fields: [userId], references: [id])
  likes    Like[]
  comments Comment[]
  saves    SavedBlog[]

  @@map("blogs")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  blog Blog @relation(fields: [blogId], references: [id])

  @@unique([userId, blogId])
  @@index([userId, blogId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  comment   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  blog Blog @relation(fields: [blogId], references: [id])

  @@index([userId, blogId])
}

model SavedBlog {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id])
  blog Blog @relation(fields: [blogId], references: [id])

  @@unique([userId, blogId]) // Ensure one saved blog per user per blog
  @@index([userId, blogId])
}
